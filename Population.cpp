//****************************************************************************
//
//
//
//****************************************************************************


 
 
// ===========================================================================
//                                   Libraries
// ===========================================================================



// ===========================================================================
//                                 Project Files
// ===========================================================================
#include "Population.h"




//############################################################################
//                                                                           #
//                           Class Template_class                            #
//                                                                           #
//############################################################################

// ===========================================================================
//                         Definition of static attributes
// ===========================================================================
const size_t Population::MAX_POP = 1000;

// ===========================================================================
//                                  Constructors
// ===========================================================================
Population::Population(void)
{
	ag = new Agent[MAX_POP];
	nbPop = 0;
}



// ===========================================================================
//                                  Destructor
// ===========================================================================
Population::~Population(void)
{
}

// ===========================================================================
//                                 Public Methods
// ===========================================================================


//----------------------------------------------------------------------------
//                                   Getters
//----------------------------------------------------------------------------

int Population::getNbPop() 
{
	return nbPop;
}


Agent* Population::getAg()
{
	return ag;
}


//-----------------------------------------------------------------------------
//                                   add
//-----------------------------------------------------------------------------


void Population::add(Agent a)
{
	ag[nbPop]= a;
	nbPop += 1;
}

//-----------------------------------------------------------------------------
//                                   speed
//-----------------------------------------------------------------------------


void Population::speed()
{/*
	for(int i = 0; i< nbPop; i++)
	{
		ag[i].vx = nextVx;
		ag[i].vy = nextVy;

		ag[i].nextVx = vx + DT * (g1*ag[i].v1 )
	}
	*/

}

//-----------------------------------------------------------------------------
//                                   run
//-----------------------------------------------------------------------------

void Population::run()
{

// creation of the bwindow

	bwindow win(640,480);
    printf("%d\n",win.init());
    win.map();

    for(;;)  // infinite loop
    {
	int ev = win.parse_event();
	switch(ev)
	{
	    case BKPRESS :
		printf("keypressed\n"); 
		printf("key : %s\n",win.get_lastkey());
		break;
	    case BBPRESS:
		printf("buttonpressed\n"); break;
	    case BEXPOSE:
		printf("expose\n"); break;
	    case BCONFIGURE:
		printf("configure\n"); break;
	}
	win.draw_point(100,100,0xFF00);
	win.draw_line(100,100,200,200,0xFF0000);
	win.draw_text(10,10,0x0,"Yo men",strlen("Yo men"));
	win.draw_square(200,200,220,220,0xFF00);
	win.draw_fsquare(400,400,440,440,0xFF00);

	//sleep() tps en s
	//usleep() tps en ms
    }
    
	
}


//-----------------------------------------------------------------------------
//                                   print
//-----------------------------------------------------------------------------

void Population::print()
{
	printf("nbPop = %d\nMAX_POP= %d\n", nbPop,MAX_POP);

	for(int i=0; i<nbPop; i++)
	{
		printf("i⁼%d \n", i);
		ag[i].print();
	}
}

// ===========================================================================
//                                Protected Methods
// ===========================================================================

// ===========================================================================
//                               Non inline accessors
// ===========================================================================
