//****************************************************************************
//
//
//
//****************************************************************************



#ifndef __PREDATOR_H__
#define __PREDATOR_H__


// ===========================================================================
//                                  Libraries
// ===========================================================================
#include <cstdio>
#include <cstdlib>
#include <ctime>



// ===========================================================================
//                                Project Files
// ===========================================================================

#include "Agent.h"


// ===========================================================================
//                              Class declarations
// ===========================================================================






class Predator: public Agent 
{
  public :
    
    // =======================================================================
    //                                 Enums
    // =======================================================================
    
    // =======================================================================
    //                               Constructors
    // =======================================================================
    Predator(void);
    Predator(int W, int H, double rp, double re);
    Predator(int X, int Y, int W, int H, double rp, double re);


    // =======================================================================
    //                                Destructor
    // =======================================================================
    virtual ~Predator(void);

    // =======================================================================
    //                            Accessors: getters
    // =======================================================================
    double getRp();
    bool getattack();
    int getpreyPos();
    int getpreyEaten();
    // =======================================================================
    //                            Accessors: setters
    // =======================================================================

    // =======================================================================
    //                                Operators
    // =======================================================================

    // =======================================================================
    //                              Public Methods
    // =======================================================================

    void move(Agent* ag, int nbPop, double vmax);
    void hunting(Agent* ag);
    void digest();

    // =======================================================================
    //                             Public Attributes
    // =======================================================================





  protected :

    // =======================================================================
    //                            Forbidden Constructors
    // =======================================================================
    /*Template_class(void)
    {
      printf("%s:%d: error: call to forbidden constructor.\n", __FILE__, __LINE__);
      exit(EXIT_FAILURE);
    };*/
    Predator(const Predator &model)
    {
      printf("%s:%d: error: call to forbidden constructor.\n", __FILE__, __LINE__);
      exit(EXIT_FAILURE);
    };


    // =======================================================================
    //                              Protected Methods
    // =======================================================================

    // =======================================================================
    //                             Protected Attributes
    // =======================================================================

    double Rp;  //radius of percepcion
    double Re; //minimum radius to eat a prey
    bool attack;   //false if the predator is not hunting
    int digestion;    // true if it is waiting because it ate a prey
    int preyPos;    // position of the prey the Predator is hunting

    int preyEaten;
};


// ===========================================================================
//                              Getters' definitions
// ===========================================================================

// ===========================================================================
//                              Setters' definitions
// ===========================================================================

// ===========================================================================
//                             Operators' definitions
// ===========================================================================

// ===========================================================================
//                          Inline functions' definition
// ===========================================================================


#endif // __PREDATOR_H__

